/*
* (c) Copyright, Real-Time Innovations, 2012.  All rights reserved.
* RTI grants Licensee a license to use, modify, compile, and create derivative
* works of the software solely for use with RTI Connext DDS. Licensee may
* redistribute copies of the software provided that all such copies are subject
* to this license. The software is provided "as is", with no warranty of any
* type, including any warranty for fitness for any purpose. RTI is under no
* obligation to maintain or support the software. RTI shall not be liable for
* any incidental or consequential damages arising out of the use or inability
* to use the software.
*/

/* ShapeTypeExtendedSubscriber.java

A publication of data of type ShapeTypeExtended

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language java -example <arch> .idl

Example publication of type ShapeTypeExtended automatically generated by 
'rtiddsgen' To test it, follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription on the same domain used for RTI Connext with the command
java ShapeTypeExtendedSubscriber <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Connext with the command
java ShapeTypeExtendedPublisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publisher and subscriber programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
Java.                       

On UNIX systems: 
add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
variable

On Windows systems:
add %NDDSHOME%\lib\<arch> to the 'Path' environment variable

Run the Java applications:

java -Djava.ext.dirs=$NDDSHOME/class ShapeTypeExtendedPublisher <domain_id>

java -Djava.ext.dirs=$NDDSHOME/class ShapeTypeExtendedSubscriber <domain_id>  
*/

// import java.net.InetAddress;
// import java.net.UnknownHostException;
// import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;
import java.util.*;

public class ShapeTypeExtendedSubscriber {

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }

        subscriberMain(domainId, sampleCount);
    }

    private ShapeTypeExtendedSubscriber() {
        super();
    }

    private static void subscriberMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        Topic topic = null;
        DataReaderListener listener = null;
        ShapeTypeExtendedDataReader reader = null;

        try {

            // SESSION #2b - To load MY_QOS_PROFILES.xml, we need to modify the 
            // DDSTheParticipantFactory Profile QoSPolicy 
        	DomainParticipantFactoryQos factoryQos = 
        		    new DomainParticipantFactoryQos();
        	DomainParticipantFactory.TheParticipantFactory.get_qos(factoryQos);
            
            // SESSION #2b - We are only adding one XML file to the url_profile 
            // sequence, so we set a maximum length of 1 
        	factoryQos.profile.url_profile.setMaximum(1);

            // SESSION #2b - Now load our custom file into the sequence, and 
            // then call set_qos() to make our modified file be the QoS provider
        	factoryQos.profile.url_profile.add("file://MY_QOS_PROFILES.xml");
            DomainParticipantFactory.TheParticipantFactory.set_qos(factoryQos);            

            // SESSION #2b - create DomainParticipant with profile
            participant = DomainParticipantFactory.TheParticipantFactory.create_participant_with_profile(
                    domainId, 
                    "My_Library",
                    "My_Profile",
                    null /* listener */, 
                    StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }                          

            // SESSION #2b - create Subscriber with profile
            subscriber = participant.create_subscriber_with_profile(
                    "My_Library",
                    "My_Profile", 
                    null /* listener */,
                    StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }     

            // Register type before creating topic
            String typeName = ShapeTypeExtendedTypeSupport.get_type_name(); 
            ShapeTypeExtendedTypeSupport.register_type(participant, typeName);

            // SESSION #1 - change Topic name from "Example ShapeTypeExtended"
            // to "Square" so we can interoperate with Shapes Demo            
            
            // SESSION #2b - create Topic with profile
            topic = participant.create_topic_with_profile(
                    "Square",
                    typeName, 
                    "My_Library",
                    "My_Profile",
                    null /* listener */, 
                    StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }
            
            // SESSION #6a - create ContentFilteredTopic OPTION 1: 
            //               filter on string contents

            StringSeq parameters = new StringSeq(); // leave empty in this case
            String filter_expression = new String("color = 'ORANGE'");
            ContentFilteredTopic cft = null;
            cft = participant.create_contentfilteredtopic(
                    "MyContentFilteredTopic", 
                    topic, 
                    filter_expression,
                    parameters);          
                    
            // SESSION #6a - create ContentFilteredTopic OPTION 2: 
            //               filter on member values using parameters

            // List<String> param_list = new ArrayList<String>();
            // param_list.add(0, "75");
            // param_list.add(1, "150");

            // StringSeq parameters = new StringSeq(param_list);
            
            // String filter_expression = new String("x >= %0 and x <= %1");
            // ContentFilteredTopic cft = null;
            // cft = participant.create_contentfilteredtopic(
            //         "MyContentFilteredTopic", 
            //         topic, 
            //         filter_expression,
            //         parameters);         

            listener = new ShapeTypeExtendedListener();

            // SESSION #2b - create DataReader with profile
            // SESSION #6a - change Topic from 'topic' to 'cft'
            // SESSION #6b - change STATUS_MASK_ALL to REQUESTED_DEADLINE_MISSED_STATUS
            //               This will let us handle incoming data using a  
            //               waitset while the listener still handles deadline
            reader = (ShapeTypeExtendedDataReader)subscriber.create_datareader_with_profile(
                    cft, //topic, 
                    "My_Library",
                    "My_Profile",
                    listener,
                    StatusKind.REQUESTED_DEADLINE_MISSED_STATUS);
            if (reader == null) {
                System.err.println("create_datareader error\n");
                return;
            }
            
            // SESSION #06b -- Get status conditions
            //
            // Each DDS entity has an attached Status Condition. To modify the
            // statuses we need to get the reader's Status Conditions first.

            StatusCondition status_condition = reader.get_statuscondition();
            if (status_condition == null) {
                System.err.println("get_statuscondition error\n");
                return;
            }

            // SESSION #06b -- Set enabled statuses
            // 
            // Now that we have the Status Condition, we are going to enable the
            // status we are interested in: knowing that data is available

            status_condition.set_enabled_statuses(
                    StatusKind.DATA_AVAILABLE_STATUS);

            // SESSION #06b -- Create and attach conditions to the WaitSet
            // 
            // Finally, we create the WaitSet and attach the Status Condition 
            // to it.

            WaitSet waitset = new WaitSet();
            waitset.attach_condition(status_condition);            

            // --- Wait for data --- //

            // SESSION #06b -- comment out receivePeriodSec 
            // final long receivePeriodSec = 4;

            // SESSION #06b -- this for loop is completely refactored
            for (int count = 0; (sampleCount == 0) || (count < sampleCount);
                    ++count) {

                // SESSION #06b -- setup the wait() timeout duration
                ConditionSeq active_conditions_seq = new ConditionSeq();
                Duration_t wait_timeout = new Duration_t();
                wait_timeout.sec = 1;
                wait_timeout.nanosec = 500000000;

                try {
                    //wait() blocks execution of the thread until one or more
                    // attached Conditions become true, or until a user- 
                    // specified timeout expires.
                    waitset.wait(active_conditions_seq, wait_timeout);
                    // We get to timeout if no conditions were triggered
                } catch (RETCODE_TIMEOUT e) {
                    System.out.println(
                          "wait() timed out: No conditions were triggered.\n");
                    continue;
                }

                // If the code gets to this point, then we were triggered by the
                // waitset and our DATA_AVAILABLE_STATUS condition.     

                ShapeTypeExtendedSeq data_seq = new ShapeTypeExtendedSeq();
                SampleInfoSeq info_seq = new SampleInfoSeq();

                try {

                    reader.take(
                        data_seq, 
                        info_seq,
                        ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                        SampleStateKind.ANY_SAMPLE_STATE,
                        ViewStateKind.ANY_VIEW_STATE,
                        InstanceStateKind.ANY_INSTANCE_STATE);
    
                    for(int i = 0; i < data_seq.size(); ++i) {
                        SampleInfo info = (SampleInfo)info_seq.get(i);
    
                        if (info.valid_data) {
                            System.out.println(
                                ((ShapeTypeExtended)data_seq.get(i)).toString("Received",0));
    
                        } else { 
                            System.out.println("GOT METADATA-ONLY SAMPLE");
                        }
                    }

                } catch (RETCODE_NO_DATA noData) {
                    // No data to process
                    System.out.println("No data");
                } finally {
                    reader.return_loan(data_seq, info_seq);
                }                 


            }
        } finally {

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                delete_participant(participant);
            }
        }
    }

    private static class ShapeTypeExtendedListener extends DataReaderAdapter {

        // ShapeTypeExtendedSeq _dataSeq = new ShapeTypeExtendedSeq();
        // SampleInfoSeq _infoSeq = new SampleInfoSeq();

        // public void on_data_available(DataReader reader) {

        //     ShapeTypeExtendedDataReader ShapeTypeExtendedReader =
        //             (ShapeTypeExtendedDataReader)reader;

        //     try {
        //         ShapeTypeExtendedReader.take(
        //                 _dataSeq, 
        //                 _infoSeq,
        //                 ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
        //                 SampleStateKind.ANY_SAMPLE_STATE,
        //                 ViewStateKind.ANY_VIEW_STATE,
        //                 InstanceStateKind.ANY_INSTANCE_STATE);

        //         for(int i = 0; i < _dataSeq.size(); ++i) {

        //             SampleInfo info = (SampleInfo)_infoSeq.get(i);

        //             // SESSION #4 - watch for a new instance
        //             if (info.view_state == ViewStateKind.NEW_VIEW_STATE) {
        //                 System.out.println("******** NEW INSTANCE ********");
        //             }
        //             if (info.valid_data) {
        //                 System.out.println(
        //                     ((ShapeTypeExtended)_dataSeq.get(i)).toString("Received",0));

        //             } else { 
        //                 System.out.println("GOT METADATA-ONLY SAMPLE");
        //             }
        //         }
        //     } catch (RETCODE_NO_DATA noData) {
        //         // No data to process
        //     } finally {
        //         ShapeTypeExtendedReader.return_loan(_dataSeq, _infoSeq);
        //     }
        // }

        // SESSION #2b - implement on_requested_deadline_missed
        public void on_requested_deadline_missed(
                DataReader reader,
                RequestedDeadlineMissedStatus status) 
	    {
            System.out.println("ReaderListener: on_requested_deadline_missed()");
        } 
    }
}

