/*
* (c) Copyright, Real-Time Innovations, 2012.  All rights reserved.
* RTI grants Licensee a license to use, modify, compile, and create derivative
* works of the software solely for use with RTI Connext DDS. Licensee may
* redistribute copies of the software provided that all such copies are subject
* to this license. The software is provided "as is", with no warranty of any
* type, including any warranty for fitness for any purpose. RTI is under no
* obligation to maintain or support the software. RTI shall not be liable for
* any incidental or consequential damages arising out of the use or inability
* to use the software.
*/

/* ShapeTypeExtendedPublisher.java

A publication of data of type ShapeTypeExtended

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language java -example <arch> .idl

Example publication of type ShapeTypeExtended automatically generated by 
'rtiddsgen' To test it, follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription on the same domain used for RTI Connext with the command
java ShapeTypeExtendedSubscriber <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Connext with the command
java ShapeTypeExtendedPublisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS.  

You can run any number of publisher and subscriber programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
Java.                       

On Unix: 
add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
variable

On Windows:
add %NDDSHOME%\lib\<arch> to the 'Path' environment variable

Run the Java applications:

java -Djava.ext.dirs=$NDDSHOME/lib/java ShapeTypeExtendedPublisher <domain_id>

java -Djava.ext.dirs=$NDDSHOME/lib/java ShapeTypeExtendedSubscriber <domain_id>        
*/

// import java.net.InetAddress;
// import java.net.UnknownHostException;
// import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.publication.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

public class ShapeTypeExtendedPublisher {

    public static void main(String[] args) {
        
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // max loop count (0 means infinite loop)
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }

        publisherMain(domainId, sampleCount);
    }

    private ShapeTypeExtendedPublisher() {
        super();
    }

    private static void publisherMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Publisher publisher = null;
        Topic topic = null;
        ShapeTypeExtendedDataWriter writer = null;

        try {

            participant = DomainParticipantFactory.TheParticipantFactory.create_participant(
                    domainId, 
                    DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                    null /* listener */, 
                    StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }        

            publisher = participant.create_publisher(
                    DomainParticipant.PUBLISHER_QOS_DEFAULT, 
                    null /* listener */,
                    StatusKind.STATUS_MASK_NONE);
            if (publisher == null) {
                System.err.println("create_publisher error\n");
                return;
            }                   

            // Register type before creating topic
            String typeName = ShapeTypeExtendedTypeSupport.get_type_name();
            ShapeTypeExtendedTypeSupport.register_type(participant, typeName);

            topic = participant.create_topic(
                    "Example ShapeTypeExtended",
                    typeName, 
                    DomainParticipant.TOPIC_QOS_DEFAULT,
                    null /* listener */, 
                    StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }           

            writer = (ShapeTypeExtendedDataWriter)publisher.create_datawriter(
                    topic, 
                    Publisher.DATAWRITER_QOS_DEFAULT,
                    null /* listener */, 
                    StatusKind.STATUS_MASK_NONE);
            if (writer == null) {
                System.err.println("create_datawriter error\n");
                return;
            }           

            // create data sample to write
            ShapeTypeExtended instance = new ShapeTypeExtended();

            InstanceHandle_t instance_handle = InstanceHandle_t.HANDLE_NIL;

            final long sendPeriodMillis = 4 * 1000; // 4 seconds

            for (int count = 0; (sampleCount == 0) || (count < sampleCount); ++count) {
                System.out.println("Writing ShapeTypeExtended, count " + count);

                /* Modify the instance to be written here */

                /* Write data */
                writer.write(instance, instance_handle);
                try {
                    Thread.sleep(sendPeriodMillis);
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }

            //writer.unregister_instance(instance, instance_handle);

        } finally {

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                delete_participant(participant);
            }
        }
    }
}

